.homes {
    // background-color: $color-secondary;
    grid-column: center-start / center-end;
    margin: 15rem 0;

    display: grid;
    // responsive columns, igual que en _features.scss
    grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
    gap: 7rem;
}
.home {
    background-color: $color-grey-light-1;

    display: grid;

    // CSS calculará automaticamente los rows
    // 2 columnas son necesarias acá para el layout, algunos elementos solo ocupan un
    // grid area, y otros dos.
    grid-template-columns: repeat(2, 1fr);
    row-gap: 3.5rem;

    &__img {
        width: 100%;
        // en ambos casos de la imagen y del like, hay que hacer explicitos sobre su posicion,
        // o si no el algoritmo las colocará en otro lugar y no harán overlapping
        grid-row: 1 / 2;
        grid-column: 1 / -1;
        z-index: 1;
    }

    &__like {
        // leer comentario de &__img
        grid-row: 1 / 2;
        grid-column: 2 / 3;
        z-index: 2;
        // para enviar el corazon al final
        justify-self: end;

        fill: $color-primary;
        height: 2.5rem;
        width: 2.5rem;
        margin: 1rem;
    }

    &__name {
        // (align-self y justify-self están siendo usados)
        // para que el item esté encima de la imagen, y alineado al fondo hacia abajo
        grid-row: 1 / 2;
        align-self: end;
        z-index: 3;
        
        // para que el item tenga espacio a los lados
        width: 80%;
        grid-column: 1 / -1;
        justify-self: center;

        // el transform se está aplicando desde el primer row, para que de lo contrario
        // no cree un row nuevo, y afecte la info/features de la casa.
        transform: translateY(50%);

        font-family: $font-display;
        font-size: 1.6rem;
        text-align: center;
        padding: 1.25rem;
        background-color: $color-secondary;
        color: $color-white;
        font-weight: 400;
    }

    // Solucion a problema que de momento no soluciona grid:
    // grid de momento no permite modificar los gaps individualmente, se aplican igual para
    // todos. Al haber transladado el titulo de la casa hacia abajo, crea un poco de
    // desigualdad en las proporciones y se ve extraño.
    // Una solución para esto es agregar un margin-top. No es lo más ideal, pero funciona.
    &__location,
    &__rooms {
        margin-top: 2.5rem;
    }

    &__location,
    &__rooms,
    &__area,
    &__price {

        font-size: 1.5rem;
        margin-left: 2rem;

        display: flex;
        align-items: center;
        gap: 1rem;

        svg {
            fill: $color-primary;
            height: 2rem;
            width: 2rem;
            // Ya flexbox admite gaps, entonces acá no es necesario usar margin-right.
            // Se coloca el gap directamente en el flex parent
            // margin-right: 1rem;
        }
    }

    &__btn {
        grid-column: 1 / -1;       
    }
}
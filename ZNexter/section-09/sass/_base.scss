// COLOR VARIABLES
$color-primary: #c69963;
$color-primary-dark: #B28451;

$color-secondary: #101d2c;

$color-white: #ffffff;
$color-black: #000000;

$color-grey-light-1: #f9f7f6;
$color-grey-light-2: #aaa;

$color-grey-dark-1: #54483A;
$color-grey-dark-2: #6D5D4B;

// FONT VARIABLES
$font-primary: 'Nunito', sans-serif;
$font-display: 'Josefin Sans', sans-serif;

// RESPONSIVE BREAKPOINTS
// 1em = 16px
$bp-largest: 75em; // 1200px/16px = 75em [1200px]
$bp-large: 62.5em; // 1000px/16px = 62.5em [1000px]
$bp-medium: 50em; // 800px/16px = 50em [800px]
$bp-small: 37.5em; // 600px/16px = 37.5em [600px]

*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

html {
    box-sizing: border-box;
    font-size: 62.5%; // 10px/16px = 62.5% -> 1rem = 10px

    @media only screen and (max-width: $bp-largest) {
        font-size: 50%;
    }
}

body {
    font-family: $font-primary;
    color: $color-grey-dark-2;
}

.container {
    display: grid;
    // Estas medidas pueden ser confusas entonces trataré de explicarlo lo mejor posible,
    // si no revisitar con las dev tools.
    // Recordar que:
    // Row: ↔️ (horizontal)
    // Column: ↕️ (vertical)
    // Estas medidas serian para definir los ejes PERPENDICULARES del row y column, cuanto van a crecer.
    // Para el row (recordar que es horizontal) seria crecimiento vertical
    
    // En cuanto a la posicion de los grid areas, el orden sería:
    // header, features, story-pictures/story-content, homes, gallery y footer.

    // min-content y auto pueden llegar a ser lo mismo (auto es el valor por defecto,
    // ambos cumplen la tarea de hacer que el contenido quepa en el grid area).
    grid-template-rows: 80vh min-content 40vw repeat(3, min-content);

    // Para el column (recordar que es vertical) seria crecimiento horizontal
    // grid-template-columns: min-content 1fr... (...);

    // para los columns es normal usar un layout de 8 a 12 columnas.
    // En este caso, los 8rem serian el sidebar, y los 1fr (con minmax) serian un tipo de "gutter" que podria ser
    // utilizado para centrar el contenido en ciertos escenarios (centered section), y en otros podrian utilizarse para mostrar
    // el contenido usando todo el width disponible (full-bleed sections).
    // el minmax es para que el gutter siempre exista, si solo se pone 1fr pasará que cuando se encoge
    // el viewport, el 1fr llegará a valer muy pocos pixeles, y el grid area no se podrá ver.
    grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8,
    [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end];


    // Nota:
    // Hay un shorthand para grid-template-columns y grid-template-rows llamado
    // grid-template, que se utiliza como
    // grid-template: [valor de grid-template-rows] / [ valor de grid-template-columns];
    // Pero puede ser muy confuso de usar con templates muy largos.

    // Para el responsive, se quitó el column del principio, y se agregó un row al principio.
    // También se especifica la posición dentro del archivo del sidebar
    // IMPORTANTE: como se declararon los line names, todo sigue funcionando igual.
    // De lo contrario, si se hubiera hecho con numeros, habría que ajustar TODO el contenido,
    // ya que por numeros cambiaría de posición ya que se quitó uno.
    @media only screen and (max-width: $bp-large) {
        grid-template-rows: 6rem 80vh min-content 40vw repeat(3, min-content);
        grid-template-columns: [full-start] minmax(6rem, 1fr) [center-start] repeat(8,
        [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end];    
    }

    // Se agregó un nuevo row para calzar los realtors, y el header ahora ocupa 100vh (menos los 6rem del sidebar)
    // también se cambió el 5to row de 40vw a -> min-content
    // PERO, como todas al final terminaron siendo min-content, es posible eliminar todas,
    // y dejar que el automatic placement algorithm haga su trabajo.
    // Las unicas que hay que modificar son el sidebar y el header, el resto estará determinado por el tamaño de su contenido.
    @media only screen and (max-width: $bp-medium) {
        // grid-template-rows: 6rem calc(100vh - 6rem) min-content min-content min-content repeat(3, min-content);  
        grid-template-rows: 6rem calc(100vh - 6rem);  
    }
}
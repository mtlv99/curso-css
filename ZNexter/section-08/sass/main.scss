// Implicit vs explicit grids
.container-explicit-implicit {
  width: 1000px;
  margin: 30px auto;
  background-color: #ddd;

  display: grid;
  // estos items acá serian el explicit grid, lo que definimos nosotros
  // (en este caso estamos definiendo un 2x2, pero hay 8 items, por lo que se crea un grid de 2x2 adicional implicito).
  grid-template-rows: repeat(2, 150px);
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;

  // con estas propiedades se define el comportamiento del grid implicito
  grid-auto-rows: 80px;
  grid-auto-columns: .5fr;
  // con esta propiedad se define la dirección en la cual se van a crear los cells implicitos, row por defecto.
  // (similar a flex-direction)
  grid-auto-flow: column;

  .item {
    padding: 20px;
    color: white;
    font-family: sans-serif;
    font-size: 30px;
    background-color: orange;
  }
}

// Grid area names
.container-names {
    background-color: #eee;
    width: 1000px;
    margin: 30px auto;
    
    display: grid;
    grid-template-rows: 1fr 1.2fr 4fr 1fr;
    grid-template-columns: repeat(3, 1.5fr) 1fr;
    gap: 30px;

    // Este approach es util para layouts pequeños,
    // pero NO para los que tengan muchisimas columnas y rows.
    // Para esos es mejor usar los grid line names.
    // acá deberian haber 16 nombres, cuidado porque es fragil
    // el punto es para dejar un espacio vacio
    // si no se define el espacio de los boxes numerados, el primero caerá encima del punto
    // por lo que también se tuvo que definir un espacio diferente para cada box y dejarlas fijas
    grid-template-areas:  "head head head ."
                          "box-1 box-2 box-3 side"
                          "main main main side"
                          "foot foot foot foot";
    ;

    & > * {
        padding: 20px;
        font-size: 30px;
        font-family: sans-serif;
        color: white;
        background-color: orange;
    }
    
    .header {
      grid-area: head;
    }
    
    .box1 { grid-area: box-1; }
    .box2 { grid-area: box-2; }
    .box3 { grid-area: box-3; }
    
    .main {
      grid-area: main;
    }
    
    .sidebar {
      grid-area: side;
    }
    
    .footer {
      grid-area: foot;
    }
}



// Grid line names
.container-2 {
    background-color: #eee;
    width: 1000px;
    margin: 30px auto;
    
    display: grid;
    // se definen los nombres del row acá entre []
    // es bastante legible, entre cada [] queda el tamaño del cell que se va a crear.
    grid-template-rows: [header-start] 1fr [header-end box-start] 1.2fr [box-end main-start] 4fr [main-end footer-start] 1fr [footer-end];
    grid-template-columns: repeat(3, [col-start] 1.5fr [col-end]) 1fr [grid-end];
    gap: 30px;

    & > * {
        padding: 20px;
        font-size: 30px;
        font-family: sans-serif;
        color: white;
        background-color: orange;
    }

    .header {
      // se pueden usar los nombres para definir limites
        grid-row: header-start / header-end;
        // en los nombres dentro de un repeat, se especifica con un numero cual de todos va a seleccionar
        grid-column: col-start 1 / grid-end;
    }
    
    .main {
        grid-column: col-start 1 / col-end 3;
        grid-row: 3 / 4;
    }
    
    .sidebar {
        grid-row: 2 / span 2;
        grid-column: 4 / 5;
    }
    
    .footer {
        grid-row: 4 / -1;
        grid-column: col-start 1 / grid-end;
    }
}

@import 'challenge';
// Generated names
.container {
    background-color: #eee;
    width: 1000px;
    margin: 30px auto;
    
    display: grid;
    // 6 elementos = 2 rows * 3 columnas = 6 elementos.
    // 2 rows
    // grid-template-rows: 150px 150px;
    // repeat para repetir celdas en un mismo track, una cantidad definida de veces
    grid-template-rows: repeat(2, 150px);

    // 3 columns
    // grid-template-columns: 150px 150px 150px;
    // fr es similar al width con porcentajes, 1fr equivaldria a todo el espacio disponible para crecer
    // 1fr = a fraction of the available space
    // (tambien similar a flex: 1)
    // grid-template-columns: repeat(2, 150px) 1fr;
    // también se puede usar para tener celdas con el mismo width

    // grid-template-columns: repeat(3, 1fr);
    // la del centro será 3 veces mas grande que el resto (medir con las devtools)

    grid-template-columns: 1fr 3fr 1fr;
    // También se pueden usar porcentajes, pero estos NO toman en cuenta el gap del grid
    // grid-template-columns: 50% 1fr 2fr;

    // en el curso se usa grid-row-grap y grid-column-gap, pero está obsoleta...
    // row-gap: 30px;
    // column-gap: 50px;

    // Si el row-gap y el column-gap son el mismo, se puede simpliicar con 'gap'
    // en el curso se usa grid-gap, pero está obsoleta...
    gap: 30px;

    // para probar con template-rows y ver como crecen usando 1fr
    // height: 1000px;
    .item {
      padding: 20px;
      font-size: 30px;
      font-family: sans-serif;
      color: white;
  
      &--1 {
        background-color: orange;
        // grid-row-start: 2;
        // grid-row-end: 3;
        // version pequeña de las de arriba
        // Funcionan como puntos cartesianos, para ubicar una celda.
        // el primer valor es el start y el ultimo el end.
        grid-row: 2 / 3;
  
        //mismo caso para los columns
        // grid-column-start: 2;
        // grid-column-end: 3;
        grid-column: 2 / 3; 
        // si hay un overflow del valor, añadiendo un valor más del grid definido, se creará
        // un grid implicito
        // grid-column: 2 / 4; 
  
        // para que se pueda ver (por la razon mencionada en &--3, se oculta)
        z-index: 10;
      }
  
      &--2 {
        background-color: yellowgreen;
        // grid-column: 1 / span 2; // lo mismo que decir 1 / 3
        grid-column: 1 / -1; // el -1 es para que ocupe todo el espacio hasta el final del column
      }
      
      &--3 {
        background-color: violet;
        // Se acomodará abajo en un nuevo row si solo se define el column, ya que el &--1 tiene una posicion explicita
        grid-column: 1 / 3;
        // si se coloca el row también, ambas permenecerán en el lugar especificado, pero el orange estará escondido
        grid-row: 2 / 3;
      }
  
      &--4 {
        background-color: palevioletred;
      }
  
      &--5 {
        background-color: royalblue;
        // grid-row: 1 / 2;
        // grid-column: 3 / 4;
        // también se puede así, pero es un poco confuso...
        // primera linea es el num de row, luego posicion, luego la linea donde termina, luego la columna donde termina
        // grid-area: 1 / 3 / 2 / 4;
  
        grid-row: 1 / 3;
        grid-column: 3 / 4;
      }
  
      &--6 {
        background-color: goldenrod;
        grid-row: 1 / 2;
        grid-column: 2 / 3;
      }

  }
}

h2 {
  text-align: center;
  padding: 20px;
  font-size: 30px;
  font-family: sans-serif;
}
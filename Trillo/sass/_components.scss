// Estos no son realmente componentes porque algunos no pueden ser reutilizados en otros proyectos,
// pero el enfoque de esta sección es otro (flexbox)

//////////////////////////////////////
// LOGO 
//////////////////////////////////////
.logo {
    height: 3.25rem;
    margin-left: 2rem;
}

//////////////////////////////////////
// SEARCH 
//////////////////////////////////////
.search {
    // background-color: orange;
    flex: 0 0 40%;

    // Un flex item también puede ser flex container al mismo tiempo 
    display: flex;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-smallest) {
        order: 1;
        flex: 0 0 100%;
        // para que el fondo también ocupe el 100% del width, y no salgan los bordes redondeados
        background-color: var(--color-grey-light-2);
    }

    &__input {
        font-family: inherit;
        font-size: inherit;
        background-color: var(--color-grey-light-2);
        border: none;
        color: inherit;
        padding: .7rem 2rem;
        border-radius: 100px;
        width: 90%; // el 100% aun no porque al hacer click se va a expander
        // para que quepa el icono del search bar cuando se hace click, y también se situe encima del navbar
        margin-right: -3.25rem;
        transition: all .2s;

        &:focus {
            outline: none;
            width: 100%;
            background-color: var(--color-grey-light-3);
        }

        &::-webkit-input-placeholder {
            font-weight: 100;
            // font-size no es necesario porque era del inherit del input
            color: var(--color-grey-light-4);
        }
    }

    &__input:focus + &__button {
        background-color: var(--color-grey-light-3);        
    }

    &__button {
        border: none;
        // lleva el mismo color del input
        background-color: var(--color-grey-light-2);

        &:focus {
            outline: none;
        }

        &:active {
            transform: translateY(2px);
        }

    }

    &__icon {
        height: 2rem;
        width: 2rem;
        fill: var(--color-grey-dark-3);
    }
}

//////////////////////////////////////
// USER NAVIGATION
//////////////////////////////////////
.user-nav {
    // background-color: greenyellow;
    // Como esto es un children del navbar, se quiere que ocupe todo el espacio disponible,
    // por que se usa align-self acá (que en este caso se rellenan los margenes de arriba y abajo)
    // Hace override del valor que se habia seteado en el resto de children (center)
    align-self: stretch;

    display: flex;
    // alinea los items verticalmente (cuando el direction está en row, valor por defecto)
    align-items: center;

    // Se aplica a todos los children directos, en vez de hacer un selector para user-nav__icon-box y user-nav__user
    & > * {
        padding: 0 2rem;
        cursor: pointer;
        height: 100%;

        // tercer nivel de flexbox container (el navbar es el 1ro, el user-nav el 2do, y este el 3ro)
        // se pone acá para no repetir en &__icon-box y &__user
        display: flex;
        align-items: center;
    }

    & > *:hover {
        background-color: var(--color-grey-light-2);
    }    


    &__icon-box {
        // relativo para el bubble de las notificaciones.
        // Parece que en &__icon no funciona bien por ser un svg...?
        position: relative;
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2);
    }
    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: var(--color-white);
        position: absolute;
        top: 1.5rem;
        right: 1.1rem;

        // flexbox también se puede usar para centrar texto (el contador de las notificaciones :O)
        display: flex;
        justify-content: center;
        align-items: center;
    }

    // &__user {

    // }

    &__user-photo {
        height: 3.75rem;
        border-radius: 50%;
        margin-right: 1rem;
    }

    // &__user-name {

    // }
}

//////////////////////////////////////
// SIDE NAVIGATION
//////////////////////////////////////
.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;

    @media only screen and (max-width: $bp-medium) {
        display: flex;
        margin: 0;
    }

    &__item {
        // relativo para los pseudoelementos del &__item
        position: relative;
        
        &:not(:last-child) {
            margin-bottom: .5rem;

            @media only screen and (max-width: $bp-medium) {
                margin: 0;
            }
        }

        // para que todos ocupen el mismo espacio en pantallas medianas e inferiores
        @media only screen and (max-width: $bp-medium) {
            flex: 1;
        }
    }

    &__item::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px; // inicialmente son 3px nada mas, simulando una linea vertical
        background-color: var(--color-primary);
        transform: scaleY(0);
        // Se pueden definir transforms para propiedades diferentes, separadas por una coma
        // en el width se tiene un delay de .2s, que es el tiempo que le toma al transform terminar.
        // Apenas termina, sigue con la animación del width
        transition: transform .2s, 
                    width .4s cubic-bezier(1, 0, 0, 1) .2s,
                    background-color .1s;
    }

    &__item:hover::before,
    &__item--active::before { // para el elemento activo
        transform: scaleY(1);
        // luego, hace que ocupe todo el espacio disponible
        width: 100%;
    }

    &__item:active::before {
        background-color: var(--color-primary-light);
    }

    &__link:link,
    &__link:visited {
        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;
        position: relative; // el z-index solo funciona bien cuando se especifica un position
        z-index: 10; // para que salga encima del pseudoelemento del link al hacer hover

        // para alinear texto e icono verticalmente
        display: flex;
        align-items: center;

        @media only screen and (max-width: $bp-medium) {
            justify-content: center;
            padding: 2rem;
        }

        // en mobile, pone el icono arriba del texto
        @media only screen and (max-width: $bp-small) {
            flex-direction: column;
            padding: 1.5rem .5rem;
        }
    }

    // Se puede usar el current color también durante los hover por ejemplo para cambiar tanto el icon como el texto
    // en un mismo selector, muy util!
    // &__link:hover {
    //     color: orangered;
    // }

    &__icon {
        // color: orange; // para desmostrar lo del currentColor, descomentar para el ejemplo
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;
        // currentColor equivale al color del elemento actual o del padre
        // en este caso lee el padre, pero si se define un color en el mismo elemento, cambia
        fill: currentColor;

        @media only screen and (max-width: $bp-small) {
            margin-right: 0;
            margin-bottom: .7rem;
            width: 1.5rem;
            height: 1.5rem;
        }
    }
}

//////////////////////////////////////
// LEGAL TEXT
//////////////////////////////////////
.legal {
    font-size: 1.2rem;
    color: var(--color-grey-light-4);
    text-align: center;
    padding: 2.5rem;

    @media only screen and (max-width: $bp-medium) {
        display: none;
    }
}

//////////////////////////////////////
// GALLERY
//////////////////////////////////////
.gallery {
    display: flex;

    &__photo {
        width: 100%;
        // las imagenes siempre deben como block, ya que en inline se debajo un espacio en blanco,
        // debajo de ellas
        display: block;
    }
}

//////////////////////////////////////
// HOTEL OVERVIEW
//////////////////////////////////////
.overview {
    display: flex;
    align-items: center;
    border-bottom: var(--line);

    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem;

        @media only screen and (max-width: $bp-small) {
            font-size: 1.8rem;
            // hace el padding un poco mas pequeño ya que este define la altura de todo el contenedor
            padding: 1.25rem 2rem;
        }
    }

    &__stars {
        // Se podría usar flex 1 para que ocupe todo el espacio del centro, pero el problema de
        // hacer eso es que si se quisiera aplicar un bg-color al hover por ejemplo, ese efecto se aplicaria a
        // todo el espacio en blanco, por lo que no es ideal.
        //Es mejor usar margin-right: auto en este caso, para que el elemento solo ocupe el espacio necesario.
        // flex: 1;
        margin-right: auto;

        // La propiedad flex acá es para quitar el comportamiento por defecto que tienen los svg's (son inline)
        // Esto hacía que los iconos no se alinearan verticalmente de forma correcta, ya que los elementos inline
        // agregando un espacio abajo por defecto, simulando texto.
        // De esta forma, se logra que el padre tenga la misma altura que los iconos svg
        // (desmarcar con las devtools para ver la diferencia)
        display: flex;
    }

    &__icon-star,
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__location {
        font-size: 1.2rem;
        display: flex;
        align-items: center;
    }

    &__icon-location {
        margin-right: .5rem;
    }

    &__rating {
        background-color: var(--color-primary);
        color: var(--color-white);
        margin-left: 3rem;
        padding: 0 2.25rem;
        // Para hacer override del align-items center definido en el padre
        align-self: stretch;

        // para alinear el texto de la calificación y cantidad de votantes
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;

        @media only screen and (max-width: $bp-small) {
            padding: 0 1.5rem;
        }
    }

    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: -3px; // para reducir un poco el espacio entre rating y cantidad de votantes

        @media only screen and (max-width: $bp-small) {
            font-size: 1.8rem;

        }
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;

        @media only screen and (max-width: $bp-small) {
            font-size: .5rem;
        }
    }
}

//////////////////////////////////////
// BUTTON INLINE
//////////////////////////////////////
.btn-inline {
    border: none;
    color: var(--color-primary);
    // los botones no heredan los font por defecto, se fuerza a que lo haga, y hace el componente reutilizable
    font-size: inherit;
    // para que el borde tenga el mismo color del texto
    border-bottom: 1px solid currentColor;
    padding-bottom: 2px;
    display: inline-block;
    background-color: transparent;
    cursor: pointer;
    transition: all .2s;

    & span {
        margin-left: 3px;
        // para que la flecha no tenga un delay, porque se está sumando la animacion de arriba.
        // Que solo se anime el margin y no el color
        transition: margin-left .2s;
    }

    &:hover {
        color: var(--color-grey-dark-1);

        span {
            margin-left: 8px;
        }
    }

    // debido a que el border usa currentColor, no hay que setearle un estado hover al borde tampoco,
    // porque se seteará el currentColor al color definido acá
    &:hover {
        color: var(--color-grey-dark-1);
    }

    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
    }

}

@keyframes pulsate {
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0, 0, 0, .25);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}

//////////////////////////////////////
// PARAGRAPH
//////////////////////////////////////

// last-of-type se aplica al ultimo elemento que
// es del type del paragraph (acá es lo opuesto, ya que está con NOT).
// Comparar con :last-child en las devtools para ver la diferencia.
.paragraph:not(:last-of-type) {
    margin-bottom: 2rem;
}


//////////////////////////////////////
// LIST
//////////////////////////////////////
.list {
    list-style: none;
    margin: 3rem 0;
    padding: 3rem 0;
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex;
    // Para que los elementos se posicionen bien cuando el espacio no es el suficiente, mueve
    // los elementos hacia abajo en una linea nueva.
    // Desactivar/activar con devtools para ver la diferencia.
    flex-wrap: wrap;

    &__item {
        // 50% para que ocupen la mitad del espacio y hayan 2 columnas, lado a lado
        flex: 0 0 50%;
        margin-bottom: .7rem;
    }

    // es una buena practica usar pseudoelementos para mantener el html limpio
    &__item::before {
        content: "";
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-right: .7rem;

        // Browsers viejos
        // URL relativa al output final del css
        background-image: url(../img/chevron-thin-right.svg);
        background-size: cover;

        // Browsers modernos -> masks!
        // mask es similar al clip-path, recorta el elemento en la forma que se especifica en el svg.

        @supports(-webkit-mask-image: url()) or (mask-image: url()) {
            background-color: var(--color-primary);
            -webkit-mask-image: url(../img/chevron-thin-right.svg);
            // para que el mask cubra todo el elemento, mismo comportamiento que el background-size: cover;
            // (debido a que el icon es más grande que 1rem, definido en height/width)
            -webkit-mask-size: cover;
            mask-image: url(../img/chevron-thin-right.svg);
            mask-size: cover;

            // limpia el bg-image por defecto que se aplica si mask-image no es soportado
            background-image: none;
        }


    }
}

//////////////////////////////////////
// RECOMMEND
//////////////////////////////////////
.recommend {
    font-size: 1.3rem;
    color: var(--color-grey-dark-3);

    display: flex;
    align-items: center;

    &__count {
        // para que el resto del espacio se cubra, y empuje las imagenes hacia el final del contenedor
        margin-right: auto;
    }

    &__friends {
        // para que siempre estén lado a lado (se añadió haciendo la página responsive)
        display: flex;
    }

    &__photo {
        height: 4rem;
        width: 4rem;
        border-radius: 50%;
        border: 3px solid var(--color-white);

        // en este si es necesario content-box, para que el border se agregue adicional a la imagen,
        // y no la encoja (restandole del tamaño a la imagen).
        // o se puede eliminar este box-sizing y agregar los 3px del border al height, pero creo que
        // queda más claro el objetivo del styling con esta property aquí.
        box-sizing: content-box;

        // para "jalar" todas las imagenes menos la ultima hacia la izquierda,
        // creando un efecto de overlapping
        &:not(:last-child) {
            margin-right: -2rem;
        }
    }
}

//////////////////////////////////////
// REVIEWS
//////////////////////////////////////
.review {
    background-color: var(--color-white);
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    overflow: hidden;

    // para el quotemark del fondo
    position: relative;

    @media only screen and (max-width: $bp-medium) {
        padding: 2rem;
        margin-bottom: 3rem;
    }

    &__text {
        margin-bottom: 2rem;
        z-index: 10;
        // para que funcione el z-index, puede ser cualquiera
        position: relative;
    }

    &__user {
        display: flex;
        align-items: center;
    }

    &__photo {
        display: block;
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1.5rem;
    }
    &__user-box {
        margin-right: auto;
    }
    &__user-name {
        font-size: 1.1rem;
        font-weight: 600;
        text-transform: uppercase;
        margin-bottom: .4rem;
    }
    &__user-date {
        font-size: 1rem;
        color: var(--color-grey-dark-3);
    }
    &__rating {
        color: var(--color-primary);
        font-size: 2.2rem;
        font-weight: 300;
    }

    // añade el icono de quotemark del fondo
    &::before {
        // ISO number del left double quotation mark, en HTML sería &ldquo;
        content: "\201c";
        position: absolute;
        top: -2.75rem;
        left: -1rem;
        line-height: 1;
        font-size: 20rem;
        color: var(--color-grey-light-2);
        // El quote no se ve muy bien con OpenSans
        font-family: sans-serif;
        z-index: 1;
    }
}

//////////////////////////////////////
// CALL TO ACTION
//////////////////////////////////////
.cta {
    padding: 3.5rem 0;
    text-align: center;

    @media only screen and (max-width: $bp-medium) {
        padding: 2.5rem 0;
    }

    &__book-now {
        font-size: 2rem;
        font-weight: 300;
        text-transform: uppercase;
        margin-bottom: 2.5rem;
    }
}

//////////////////////////////////////
// CTA BUTTON
//////////////////////////////////////
.btn {
    font-size: 1.5rem;
    font-weight: 300;
    text-transform: uppercase;
    border-radius: 100px;
    border: none;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: var(--color-white);
    cursor: pointer;

    // para que el pseudoelemento escondido no salga
    overflow: hidden;

    // Relativo para los pseudoelementos del button
    position: relative;

    // para no tener propiedades repetidas que se aplican a todos los children
    & > * {
        // como es un span, hay que ponerlo como inline-block para poner padding
        display: inline-block;
        // para que tenga la misma altura y anchura del padre
        height: 100%;
        width: 100%;
        transition: all .2s;
    }

    &__visible {
        padding: 2rem 7.5rem;
    }

    &__invisible {
        position: absolute;
        // el ancho se pone en 0 porque si se pone igual que en &__visible y el texto
        // no cabe, se desbordará hacia abajo
        padding: 2rem 0;
        left: 0;
        // mueve elemento hacia arriba exactamente la altura que tiene el elemento.
        // si tiene una altura de 50 pixeles, se moverá 50 pixeles hacia arriba
        top: -100%;
    }

    &:hover {
        background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
    }


    &:hover &__visible {
        // acá hay que usar transform porque NO se usó absolute positioning
        transform: translateY(100%);
    }

    &:hover &__invisible {
        top: 0;
    }

    // quita outline y agrega animacion cuando el boton está enfocado
    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
    }
}